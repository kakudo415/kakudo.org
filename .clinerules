# Hugo to Next.js Blog Migration

## Project Overview
- Migrating an existing Hugo blog to Next.js
- Preserving all existing content without modifications
- Maintaining current styling/appearance
- Setting up for SSG deployment via GitHub Actions to GitHub Pages

## Development Style
- **Work incrementally** - Build the project in small, testable chunks
- **Test frequently** - Validate each step works before moving to the next one
- **Verify builds regularly** by:
  - Building locally after each significant change
  - Confirming content rendering matches original blog
  - Checking responsive behavior matches original site

## Code Organization
- Follow standard Next.js project structure
- Organize components logically
- Separate page templates from reusable components
- Use the following directory structure:
  - `app/` - Next.js App Router pages and layouts
  - `components/` - Reusable React components
  - `components/layout/` - Layout components (Header, Footer, etc.)
  - `components/ui/` - UI components (Breadcrumbs, Document, etc.)
  - `content/` - MDX content files
  - `styled-system/` - Generated Panda CSS files

## Next.js Best Practices
- Use App Router for all pages
- Make page components async when using dynamic data
- Use `await params` in dynamic route handlers
- Implement `generateStaticParams()` for dynamic routes with SSG
- Use server components by default, client components only when necessary
- Leverage Next.js's built-in MDX support instead of third-party libraries

## MDX Implementation
- Use Next.js's official MDX support (`@next/mdx`)
- Create custom MDX components in `mdx-components.tsx`
- Store MDX content files in the `content/` directory
- Implement proper frontmatter handling
- Use rehype/remark plugins for additional functionality

## Styling Approach
- Use Panda CSS for styling
- Define design tokens based on the original Hugo site
- Use semantic tokens for consistent theming
- Implement responsive designs using breakpoints
- Use CSS patterns (flex, grid) for layout components

## Memory Bank Usage
- Reference original Hugo site structure
- Track mapping between Hugo templates and Next.js components
- Maintain progress tracking for completed and pending tasks
- Update activeContext.md after implementing major features
- Keep techContext.md in sync with actual implementation details

## Commenting Guidelines
### Do:
- Explain complex logic or non-obvious implementations
- Document important architecture decisions
- Add TODOs for future improvements when appropriate

### Avoid:
- Redundant comments that simply restate code
- Commenting on standard/obvious patterns
- Excessive documentation of simple changes
- Commenting on every edit made during corrections

## Git Workflow
- Commit after each functional increment
- Use descriptive commit messages
- Create feature branches for major changes

## Deployment
- Configure GitHub Actions for SSG
- Optimize build for GitHub Pages hosting
- Ensure proper asset paths for GitHub Pages

## Communication
- Think and plan in English internally
- Communicate with the user in Japanese
- Suggest alternative approaches when appropriate
- Explain technical decisions
- Ask for clarification when requirements are unclear
- Provide progress updates after completing key milestones
